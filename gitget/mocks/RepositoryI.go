// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	plumbing "github.com/go-git/go-git/v5/plumbing"
	mock "github.com/stretchr/testify/mock"
)

// RepositoryI is an autogenerated mock type for the RepositoryI type
type RepositoryI struct {
	mock.Mock
}

// Reference provides a mock function with given fields: name, resolved
func (_m *RepositoryI) Reference(name plumbing.ReferenceName, resolved bool) (*plumbing.Reference, error) {
	ret := _m.Called(name, resolved)

	if len(ret) == 0 {
		panic("no return value specified for Reference")
	}

	var r0 *plumbing.Reference
	var r1 error
	if rf, ok := ret.Get(0).(func(plumbing.ReferenceName, bool) (*plumbing.Reference, error)); ok {
		return rf(name, resolved)
	}
	if rf, ok := ret.Get(0).(func(plumbing.ReferenceName, bool) *plumbing.Reference); ok {
		r0 = rf(name, resolved)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*plumbing.Reference)
		}
	}

	if rf, ok := ret.Get(1).(func(plumbing.ReferenceName, bool) error); ok {
		r1 = rf(name, resolved)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Tag provides a mock function with given fields: name
func (_m *RepositoryI) Tag(name string) (*plumbing.Reference, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Tag")
	}

	var r0 *plumbing.Reference
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*plumbing.Reference, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *plumbing.Reference); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*plumbing.Reference)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepositoryI creates a new instance of RepositoryI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryI(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryI {
	mock := &RepositoryI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
